SyntheticData.random_cor_matrix(5, .5)
x = SyntheticData.random_cor_matrix(5, .5)
x
inv(x)
eigs(inv(x))
ix = inv(cholfact(x))
eigs(x)[1] .> 0
abs(eigs(ix)[2]) .> 10e-8
abs(eigs(ix)[2]) .> 10e-2
abs(eigs(ix)[2]) .> 10e-1
abs(ix) .> 10e-1
abs(ix) .> 10e-8
sum(abs(ix) .> 10e-8)
sum(abs(ix) .> 10e-8) / length(ix)
ix = inv(cholfact(random_cor_matrix(5, .2))); sum(abs(ix) .> 10e-8) / length(ix)
ix = inv(cholfact(SyntheticData.random_cor_matrix(5, .2))); sum(abs(ix) .> 10e-8) / length(ix)
function density(d)
ix = inv(cholfact(SyntheticData.random_cor_matrix(5, .2))); sum(abs(ix) .> 10e-8) / length(ix)
end
density(0.36)
density(0.36)
density(0.36)
density(0.36)
density(0.36)
density(0.36)
density(0.36)
density(0.36)
density(0.36)
plot
map(density, range(.05, .05, 1))
map(density, range(.05, 1, .05))
map(density, range(.05, 1.0, .05))
methods(range)
map(density, range(.05, 1.0, 10))
map(\d -> (d, density(d)), range(.05, 1.0, 10))
map(/d -> (d, density(d)), range(.05, 1.0, 10))
map(d -> (d, density(d)), range(.05, 1.0, 10))
map(d -> (d, density(d)), range(.05, 10, 1.0))
help(range)
doc(range)
methods(range)
map(d -> (d, density(d)), range(.05, .05, 10))
map(d -> (d, density(d)), range(.1, .05, 10))
map(d -> (d, density(d)), range(.05, .1, 10))
map(d -> (d, mean([density(d) for i = 1:10])), range(.05, .1, 10))
function density(d)
ix = inv(cholfact(SyntheticData.random_cor_matrix(5, d))); sum(abs(ix) .> 10e-8) / length(ix)
end
map(d -> (d, mean([density(d) for i = 1:10])), range(.05, .1, 10))
function density(d)
ix = inv(cholfact(SyntheticData.random_cor_matrix(5, d))); (sum(abs(ix) .> 10e-8) - size(ix, 1)) / (length(ix) - size(ix, 1))
end
map(d -> (d, mean([density(d) for i = 1:10])), range(.05, .1, 10))
function is_posdef(m)
m == inv(m)
m'
) && and(eigs(m)[2] .> 0))
methods(and)
methods(all)
function is_posdef(m)
return ((m == m') && all(eigs(m)[2] .> 0))
end
is_posdef(eye(4))
is_posdef(eye(4))
eigs(eye(4))
eye(4)'
eye(4) == eye(4)'
i = eye(4)
eigs(i)[1] .> 0
all(eigs(i)[1] .> 0)
all(eigs(i)[1] .> 0) && (i == i')
return ((m == m') && all(eigs(m)[1] .> 0))
function is_posdef(m)
return ((m == m') && all(eigs(m)[1] .> 0))
end
is_posdef(eye(5))
is_posdef(random_cor_matrix(4, .5))
is_posdef(SyntheticData.random_cor_matrix(4, .5))
is_posdef(SyntheticData.random_cor_matrix(4, .5))
all(map(is_posdef(SyntheticData.random_cor_matrix(4, .5)), 1:100))
all(n -> map(is_posdef(SyntheticData.random_cor_matrix(4, .5)), 1:100))
all(map(n -> is_posdef(SyntheticData.random_cor_matrix(4, .5)), 1:100))
all(map(n -> is_posdef(SyntheticData.rand_cov_(4, .5)), 1:100))
@time all(map(n -> is_posdef(SyntheticData.rand_cov_(4, .5)), 1:100))
@time all(map(n -> is_posdef(SyntheticData.rand_cov_(4, .5)), 1:100))
@time all(map(n -> is_posdef(SyntheticData.rand_cov_(4, .5)), 1:100))
@time all(map(n -> is_posdef(SyntheticData.rand_cov_(10, .5)), 1:100))
@time all(map(n -> is_posdef(SyntheticData.rand_cov_(10, .5)), 1:100))
@time all(map(n -> is_posdef(SyntheticData.random_cor_matrix(10, .5)), 1:100))
@time all(map(n -> is_posdef(SyntheticData.random_cor_matrix(10, .5)), 1:100))
toy()
SyntheticValidation.toy()
SyntheticValidation.toy()
SyntheticData.rand_HMM_model(5, 3)
SyntheticData.random_cor_matrix(4, .5)
SyntheticData.random_cor_matrix(4, .5)
SyntheticData.random_cov(4, .5)
SyntheticData.rand_cov(4, .5)
SyntheticData.rand_cov_(4, .5)
SyntheticData.rand_cov(4, .5)
SyntheticData.rand_cov(4, .5)
SyntheticData.rand_cov(4, .5)
SyntheticValidation.toy()
SyntheticFigures.run_standard_figures("saved_outputs/synth-full-2-20-16.dump")
pwd()
cd("../..")
SyntheticFigures.run_standard_figures("saved_outputs/synth-full-2-20-16.dump")
x = (1, 2, 3, 4, 5)
x[1:3]
mkdir("testdir")
mkdir("enrichment_matrices")
methods(mkdir)
isdir("enrichment_matrices")
isdir("testdir")
d = Dict(:a => "a")
d[:a]
SynthValidation.synth_data_model()
SyntheticValidation.synth_data_model()
SyntheticValidation.synth_data_model()
SyntheticValidation.synth_data_model()
SyntheticData.random_cor_matrix(5, .5)
SyntheticValidation.synth_data_model()
SyntheticValidation.synth_data_model()
SyntheticValidation.synth_data_model()
SyntheticValidation.synth_data_model()
SyntheticValidation.synth_data_model()
SyntheticValidation.synth_data_model()
SyntheticValidation.synth_data_model()
SyntheticValidation.synth_data_model()
SyntheticValidation.synth_data_model()
SyntheticValidation.synth_data_model()
SyntheticValidation.synth_data_model()
SyntheticValidation.synth_data_model()
SyntheticValidation.synth_data_model()
SyntheticValidation.synth_data_model()
SyntheticValidation.synth_data_model()
SyntheticValidation.synth_data_model()
SyntheticValidation.synth_data_model(density = 1.0)
SyntheticValidation.synth_data_model(density = .1)
results = SyntheticValidation.synth_data_model(density = .1)
results = SyntheticValidation.synth_data_model(density = .1)
results[:true_networks]
true_structure1 = abs(results[:true_networks][1]) .> 1e-8
found_structure1 = abs(results[:found_networks][1]) .> 1e-8
results[:found_networks][1]
results[:true_networks][1]
results_longer = SyntheticValidation.synth_data_model(density = .1, n=100000)
results_longer = SyntheticValidation.synth_data_model(density = .1, verbose = true)
results_longer = SyntheticValidation.synth_data_model(density = .1, verbose = true)
results_longer = SyntheticValidation.synth_data_model(density = .1, verbose = true)
results_longer = SyntheticValidation.synth_data_model(density = .1, verbose = true)
results_longer = SyntheticValidation.synth_data_model(density = .1, verbose = true)
results_longer = SyntheticValidation.synth_data_model(density = .1, verbose = true)
results_longer = SyntheticValidation.synth_data_model(density = .1, verbose = true)
results_longer = SyntheticValidation.synth_data_model(density = .1, verbose = true)
results_longer = SyntheticValidation.synth_data_model(density = .1, verbose = true)
results_longer = SyntheticValidation.synth_data_model(density = .1, verbose = true)
results_longer = SyntheticValidation.synth_data_model(density = .1, verbose = true)
results_longer = SyntheticValidation.synth_data_model(density = .1, verbose = true)
results_longer = SyntheticValidation.synth_data_model(density = .1, verbose = true, n =10000)
results_longer = SyntheticValidation.synth_data_model(density = .1, verbose = false, n =10000)
results_longer = SyntheticValidation.synth_data_model(density = .1, verbose = false, n =10000, emission_dist = fit_glasso)
using EmissionDistributions
results_longer = SyntheticValidation.synth_data_model(density = .1, verbose = false, n =10000, emission_dist = fit_glasso)
